rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isWithinQuota() {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return userDoc.data.quota.used < userDoc.data.quota.monthly;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId);
      // Allow one-time creation by the user themselves (during registration)
      allow create: if isOwner(userId)
                    && !exists(/databases/$(database)/documents/users/$(userId))
                    && request.resource.data.email == request.auth.token.email
                    && request.resource.data.subscriptionStatus == "free"
                    && request.resource.data.quota.monthly == 3
                    && request.resource.data.quota.used == 0;
      allow update, delete: if false; // Quota updates only via Cloud Functions
    }

    // Podcasts collection
    match /podcasts/{podcastId} {
      allow read, delete: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId)
                    && isWithinQuota();
      allow update: if false; // Only via Cloud Functions
    }

    // Articles collection
    match /articles/{articleId} {
      allow read: if isOwner(resource.data.userId);
      allow update: if isOwner(resource.data.userId); // For editing
      allow create, delete: if false; // Only via Cloud Functions
    }

    // Subscriptions collection
    match /subscriptions/{subId} {
      allow read: if isOwner(resource.data.userId);
      allow write: if false; // Only via Stripe Webhooks
    }
  }
}
